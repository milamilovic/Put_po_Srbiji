package entity;

import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;

public class NPC_boy extends Entity{

	public NPC_boy(GamePanel gamePanel) {
		super(gamePanel);
		
		this.direction = "front";	
		speed = 3;
		this.solidArea = new Rectangle(0, 0, 48, 48);
	}
	
	public void getNPCImage() {
		try {
			
			front = ImageIO.read(getClass().getResourceAsStream("/npc/boy_front.png"));
			BufferedImage scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			final AffineTransform at = AffineTransform.getScaleInstance((double)gamePanel.tileSize / (double)front.getWidth(), (double)gamePanel.tileSize / (double)front.getHeight());
			final AffineTransformOp ato = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);
			scaledImage = ato.filter(front, scaledImage);
			front = scaledImage;
			
			up1 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_up1.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(up1, scaledImage);
			up1 = scaledImage;
			
			up2 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_up2.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(up2, scaledImage);
			up2 = scaledImage;
			
			down1 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_down1.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(down1, scaledImage);
			down1 = scaledImage;
			
			down2 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_down2.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(down2, scaledImage);
			down2 = scaledImage;
			
			left1 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_left1.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(left1, scaledImage);
			left1 = scaledImage;
			
			left2 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_left2.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(left2, scaledImage);
			left2 = scaledImage;
			
			right1 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_right1.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(right1, scaledImage);
			right1 = scaledImage;
			
			right2 = ImageIO.read(getClass().getResourceAsStream("/npc/boy_right2.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(right2, scaledImage);
			right2 = scaledImage;
			
			back = ImageIO.read(getClass().getResourceAsStream("/npc/boy_back.png"));
			scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			scaledImage = ato.filter(back, scaledImage);
			back = scaledImage;
			
			
		}catch (IOException e) {
			e.printStackTrace();
		}
	}

}
