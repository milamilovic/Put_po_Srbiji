package entity;

import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;

public class Entity {
	
	public GamePanel gamePanel;

	public Entity(GamePanel gamePanel) {
		this.gamePanel = gamePanel;
	}

	public int worldX, worldY;
	public int speed;
	
	public BufferedImage front, back, up1, up2, down1, down2, left1, left2, right1, right2;
	public String direction;
	
	public int spriteCounter = 0;
	public int spriteNum = 1;
	
	public Rectangle solidArea;
	public int solidAreaDefaultX, solidAreaDefaultY;
	
	public boolean collisionOn = false;
	
	
	public BufferedImage getImage(String ImageName) {
		try {
			
			front = ImageIO.read(getClass().getResourceAsStream(ImageName));
			BufferedImage scaledImage = new BufferedImage(gamePanel.tileSize, gamePanel.tileSize, BufferedImage.TYPE_INT_ARGB);
			final AffineTransform at = AffineTransform.getScaleInstance((double)gamePanel.tileSize / (double)front.getWidth(), (double)gamePanel.tileSize / (double)front.getHeight());
			final AffineTransformOp ato = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);
			scaledImage = ato.filter(front, scaledImage);
			return scaledImage;
			
			
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}
